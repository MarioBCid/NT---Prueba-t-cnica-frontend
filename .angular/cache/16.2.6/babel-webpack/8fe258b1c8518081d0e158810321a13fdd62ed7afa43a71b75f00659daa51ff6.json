{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { getAttributeListUrl, getDigimonListUrl, getDigimonUrl, getFieldListUrl, getLevelListUrl } from './apiUrls';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n  getData(id) {\n    return this.get(getDigimonUrl + id);\n  }\n  getLevelList() {\n    return this.get(getLevelListUrl);\n  }\n  getFieldList() {\n    return this.get(getFieldListUrl);\n  }\n  getAttributeList() {\n    return this.get(getAttributeListUrl);\n  }\n  getItem(url) {\n    return this.http.get(url);\n  }\n  getDigimonList(params) {\n    const {\n      digimonName,\n      attribute,\n      level,\n      elements,\n      page\n    } = params;\n    let url = getDigimonListUrl;\n    if (digimonName) url = `${url}${digimonName}`;\n    if (attribute) url = `${url}&attribute=${attribute}`;\n    if (level) url = `${url}&level=${level}`;\n    if (elements) url = `${url}&pageSize=${elements}`;\n    if (page) url = `${url}&page=${page}`;\n    return this.http.get(url);\n  }\n  get(url) {\n    return this.http.get(url).pipe(map(data => {\n      return data;\n    }), catchError(error => {\n      console.error('Error fetching data:', error);\n      throw error;\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","map","getAttributeListUrl","getDigimonListUrl","getDigimonUrl","getFieldListUrl","getLevelListUrl","DataService","constructor","http","getData","id","get","getLevelList","getFieldList","getAttributeList","getItem","url","getDigimonList","params","digimonName","attribute","level","elements","page","pipe","data","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mblanco\\NT-Prueba-tecnica-frontend\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { getAttributeListUrl, getDigimonListUrl, getDigimonUrl, getFieldListUrl, getLevelListUrl } from './apiUrls';\r\nimport { DetailedDigimon, DigimonResponse, FieldResponse, SingleField, searchProps } from '../Interfaces/digimon.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getData(id: number): Observable<DetailedDigimon> { return this.get(getDigimonUrl + id); }\r\n\r\n  getLevelList(): Observable<FieldResponse> { return this.get(getLevelListUrl); }\r\n\r\n  getFieldList(): Observable<FieldResponse> { return this.get(getFieldListUrl); }\r\n\r\n  getAttributeList(): Observable<FieldResponse> { return this.get(getAttributeListUrl); }\r\n\r\n  getItem(url: string): Observable<SingleField> { return this.http.get<SingleField>(url); }\r\n\r\n  getDigimonList(params: searchProps): Observable<DigimonResponse> {\r\n    const { digimonName, attribute, level, elements, page } = params;\r\n    let url = getDigimonListUrl;\r\n\r\n    if (digimonName) url = `${url}${digimonName}`;\r\n    if (attribute) url = `${url}&attribute=${attribute}`;\r\n    if (level) url = `${url}&level=${level}`;\r\n    if (elements) url = `${url}&pageSize=${elements}`;\r\n    if (page) url = `${url}&page=${page}`;\r\n\r\n    return this.http.get<any>(url);\r\n  }\r\n\r\n  get(url: string) {\r\n    return this.http.get<any>(url).pipe(\r\n      map((data) => {\r\n        return data;\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error fetching data:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"AAGA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,mBAAmB,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,eAAe,EAAEC,eAAe,QAAQ,WAAW;;;AAMnH,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,OAAOA,CAACC,EAAU;IAAiC,OAAO,IAAI,CAACC,GAAG,CAACR,aAAa,GAAGO,EAAE,CAAC;EAAE;EAExFE,YAAYA,CAAA;IAAgC,OAAO,IAAI,CAACD,GAAG,CAACN,eAAe,CAAC;EAAE;EAE9EQ,YAAYA,CAAA;IAAgC,OAAO,IAAI,CAACF,GAAG,CAACP,eAAe,CAAC;EAAE;EAE9EU,gBAAgBA,CAAA;IAAgC,OAAO,IAAI,CAACH,GAAG,CAACV,mBAAmB,CAAC;EAAE;EAEtFc,OAAOA,CAACC,GAAW;IAA6B,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAcK,GAAG,CAAC;EAAE;EAExFC,cAAcA,CAACC,MAAmB;IAChC,MAAM;MAAEC,WAAW;MAAEC,SAAS;MAAEC,KAAK;MAAEC,QAAQ;MAAEC;IAAI,CAAE,GAAGL,MAAM;IAChE,IAAIF,GAAG,GAAGd,iBAAiB;IAE3B,IAAIiB,WAAW,EAAEH,GAAG,GAAG,GAAGA,GAAG,GAAGG,WAAW,EAAE;IAC7C,IAAIC,SAAS,EAAEJ,GAAG,GAAG,GAAGA,GAAG,cAAcI,SAAS,EAAE;IACpD,IAAIC,KAAK,EAAEL,GAAG,GAAG,GAAGA,GAAG,UAAUK,KAAK,EAAE;IACxC,IAAIC,QAAQ,EAAEN,GAAG,GAAG,GAAGA,GAAG,aAAaM,QAAQ,EAAE;IACjD,IAAIC,IAAI,EAAEP,GAAG,GAAG,GAAGA,GAAG,SAASO,IAAI,EAAE;IAErC,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAMK,GAAG,CAAC;EAChC;EAEAL,GAAGA,CAACK,GAAW;IACb,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAMK,GAAG,CAAC,CAACQ,IAAI,CACjCxB,GAAG,CAAEyB,IAAI,IAAI;MACX,OAAOA,IAAI;IACb,CAAC,CAAC,EACF1B,UAAU,CAAE2B,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAAC,QAAAE,CAAA,G;qBArCUtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}